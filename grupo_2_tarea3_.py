# -*- coding: utf-8 -*-
"""Grupo_2_Tarea3 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oPVJF6GfVtQ24kKAeI2cLj2RQpHjZsuM
"""

#I. Crea un programa que modele la probabilidad de obtener un número específico de éxitos en una serie de lanzamientos de una moneda sin trucos (probabilidad de éxito 𝒑 = 𝟎. 𝟓).
#Genera la probabilidad de obtener exactamente 7 caras en 10 lanzamientos

import scipy.stats as stats
from scipy.stats import binom

# Definimos los parámetros para la distribución binomial (apropiada para este caso con dos posibles resultados)
n = 10
p = 0.5
k = 7

# Calculamos la probabilidad de obtener 7 caras en 10 lanzamientos
probabilidad = binom.pmf(k, n, p)
print(probabilidad)

#II. Calcula la probabilidad acumulada de obtener 7 o menos caras en 10 lanzamientos

probabilidad_acumulada = binom.cdf(k, n, p)
print(probabilidad_acumulada)

#III. Grafica la distribución binomial completa para los 10 lanzamientos, mostrando la probabilidad de obtener desde 0 hasta 10 caras
import matplotlib.pyplot as plt
import numpy as np

x = np.arange(0, 11)
probabilidades = binom.pmf(x, n, p)

# Graficamos la distribución
plt.bar(x, probabilidades, alpha=0.7, color='skyblue')
plt.title('Distribución Binomial: 10 lanzamientos de una moneda sin trucos')
plt.xlabel('Número de caras')
plt.ylabel('Probabilidad')
plt.show()

#IV. Ahora la moneda tiene mayor probabilidad de caer en cara (probabilidad de éxito 𝒑 = 𝟎. 𝟖). ¿Cómo cambian los resultados? Vuelve a realizar los ejercicios I, II y II
# Nueva probabilidad de éxito
p_2 = 0.8

# Ejercicio I: Probabilidad de obtener exactamente 7 caras en 10 lanzamientos
probabilidad_nueva = binom.pmf(k, n, p_2)
print("Probabilidad de obtener exactamente 7 caras con p = 0.8:", probabilidad_nueva)

# Ejercicio II: Probabilidad acumulada de obtener 7 o menos caras en 10 lanzamientos
probabilidad_acumulada_nueva = binom.cdf(k, n, p_2)
print("Probabilidad acumulada de obtener 7 o menos caras con p = 0.8:", probabilidad_acumulada_nueva)

# Ejercicio III: Graficar la distribución binomial completa
x = np.arange(0, 11)
probabilidades_nuevas = binom.pmf(x, n, p_2)

plt.bar(x, probabilidades_nuevas, alpha=0.7, color='skyblue')
plt.title('Distribución Binomial: 10 lanzamientos con p = 0.8')
plt.xlabel('Número de caras')
plt.ylabel('Probabilidad')
plt.show()

#V. Utilizando 𝒔𝒄𝒊𝒑𝒚. 𝒔𝒕𝒂𝒕𝒔, realiza un análisis de una distribución normal con una media de 0 y desviación estándar de 1. Genera un conjunto de datos aleatorios con 1000 muestras a partir de esta distribución.
from scipy.stats import norm
media = 0
desviacion_estandar = 1
muestras = 1000

datos_aleatorios = norm.rvs(media, desviacion_estandar, muestras)
plt.hist(datos_aleatorios)
plt.show()

#VI. Calcula y muestra la media, la desviación estándar y la mediana de los datos generados
media_muestra = np.mean(datos_aleatorios)
desviacion_estandar_muestra = np.std(datos_aleatorios)
mediana_muestra = np.median(datos_aleatorios)

print(f"La media de los datos generados es {media_muestra}")
print(f"La desviación estándar de los datos generados es {desviacion_estandar_muestra}")
print(f"La mediana de los datos generados es {mediana_muestra}")

#VII. Graficar el histograma de los datos y superponer la curva de la distribución normal teórica
plt.hist(datos_aleatorios, bins=30, density=True, alpha=0.5, color='green')

xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, media, desviacion_estandar)
plt.plot(x, p, 'k', linewidth=2)

plt.title('Histograma de datos generados y curva de distribución normal')
plt.xlabel('Valor')
plt.ylabel('Densidad de probabilidad')
plt.show()

#VIII. Calcular la probabilidad de que un valor caiga dentro del rango de -1 a 1
probabilidad_rango = norm.cdf(1, media, desviacion_estandar) - norm.cdf(-1, media, desviacion_estandar)
print(f"La probabilidad de que un valor caiga dentro del rango de -1 a 1 es {probabilidad_rango}")